{"version":3,"file":"mycore.js.map","sources":["ng://mycore/lib/service-state.ts","ng://mycore/lib/signalr-client.service.ts","ng://mycore/lib/data.service.ts","ng://mycore/lib/auth.service.ts","ng://mycore/lib/auth.guard.ts","ng://mycore/lib/core.service.ts","ng://mycore/lib/core.component.ts","ng://mycore/lib/core.module.ts"],"sourcesContent":["\r\n\r\nexport enum ServiceState {\r\n    Unititialised,\r\n    Intialised\r\n}\r\n","\r\nimport { Injectable, Output, EventEmitter } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { ServiceState } from './service-state';\r\n\r\ndeclare var signalR: any;\r\n\r\n@Injectable()\r\nexport class SignalrClientService {\r\n\r\n    promise: any;\r\n    connection: any;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    get State(): Observable<ServiceState>\r\n    {\r\n        return this.state.asObservable();\r\n    }\r\n\r\n    @Output() Recieved: EventEmitter<any> = new EventEmitter();\r\n\r\n    private message = new Subject<string>();\r\n    private state = new Subject<ServiceState>();\r\n\r\n    send(message: string): void {\r\n        this.connection.invoke('Broadcast', message)\r\n            .catch(err => console.error(err.toString()));\r\n\r\n        this.connection.invoke('Broadcast', 101)\r\n            .catch(err => console.error(err.toString()));\r\n    }\r\n\r\n    start():void {\r\n        //let connection = new signalR.HubConnection('/apphub');\r\n\r\n        //let url = 'http://' + document.location.host + '/chat';\r\n        //let connection = new signalR.HttpConnection(url, { transport: signalR.HttpTransportType.WebSockets, logger: signalR.LogLevel.Trace });\r\n\r\n        this.connection = new signalR.HubConnectionBuilder()\r\n            .withUrl(\"/apphub\")\r\n            .build();\r\n\r\n\r\n        this.connection.on('Send', data => {\r\n            console.log(data);\r\n            this.Recieved.emit(data);\r\n        });\r\n\r\n        this.promise = this.connection.start();\r\n\r\n        this.promise.catch(err => console.log(err));\r\n\r\n        this.promise.then(() => this.state.next(ServiceState.Intialised));\r\n        \r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs'\nimport { Http } from '@angular/http';\r\n\r\nimport { map, catchError } from 'rxjs/operators';\nimport { pipe, of } from 'rxjs';\nimport { EventEmitter } from '@angular/core';\r\nimport { Output } from '@angular/core';\r\n\nexport interface IDataService {\n    GetData(): Observable<any>;\n}\n\n@Injectable()\nexport class DataService implements IDataService{\n\r\n    @Output()\n    StateChanged: EventEmitter<boolean> = new EventEmitter();\r\n\r\n    GetData(): Observable<any> {\r\n\r\n        return this.http\r\n                    .post('/data', {})\r\n                    .pipe(\r\n            map(res => res.json()),\r\n            catchError(this.handleError('getData', []))\r\n        )\r\n    }\r\n\n    /**\r\n     * Handle Http operation that failed.\r\n     * Let the app continue.\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\r\n    private handleError<T>(operation = 'operation', result?: T) {\r\n        return (error: any): Observable<T> => {\r\n\r\n            // TODO: send the error to remote logging infrastructure\r\n            console.error(error); // log to console instead\r\n\r\n            // TODO: better job of transforming error for user consumption\r\n            console.log(`${operation} failed: ${error.message}`);\r\n\r\n            // Let the app keep running by returning an empty result.\r\n            return of(result as T);\r\n        };\r\n    }\n  constructor(private http:Http) { }\n}\n","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { Output } from '@angular/core';\r\nimport { map, catchError } from 'rxjs/operators';\nimport { pipe, of } from 'rxjs';\nimport { OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n        \n@Injectable()\nexport class AuthService {\n    RedirectUrl: string;\r\n\n    constructor(private http: Http, private  router: Router) {\n\n        this.http\n            .get(\"/auth\")\n            .pipe(\r\n                map(res =>res.json())\n            )\n            .subscribe(data => {\n                this.isLoggedIn = data;\n                this.StateChanged.emit(this.isLoggedIn);\n            });\n    }\n\n    private isLoggedIn: boolean = false;\n\n    @Output()\n    StateChanged: EventEmitter<boolean> = new EventEmitter()\n\n    get IsLoggedIn(): boolean { return this.isLoggedIn; }\r\n\r\n    public login(username:string, password:string) {\n\n        var that = this;\n        this.http\n            .post(\"/login\", JSON.stringify({ Username: username, Password: password }))\n            .subscribe(function (response) {\n               \n                that.isLoggedIn = response.ok;\n                that.StateChanged.emit(that.isLoggedIn);\r\n\r\n                if (response.ok) that.router.navigate([\"/\"])\r\n            },\n            function(error) {\n                that.isLoggedIn = false;\n                that.StateChanged.emit(that.isLoggedIn);\r\n            });\n\n    }\n\n\n    public logout() {\n\n        var that = this;\n        this.http\n            .get(\"/logout\")\n            .pipe(\n                map(res => { if (res.ok) this.router.navigate([\"/\"]) }),\n            );\n\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\r\nimport { Router } from '@angular/router';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n    constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | boolean {\n\r\n      let url: string = state.url;\r\n\r\n      return this.checkLogin(url);\n  }\n\n  checkLogin(url: string): boolean {\r\n      if (this.authService.IsLoggedIn) { return true; }\r\n\r\n      // Store the attempted URL for redirecting\r\n      this.authService.RedirectUrl = url;\r\n\r\n      // Navigate to the login page with extras\r\n      this.router.navigate(['/login']);\r\n\r\n      return false;\r\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CoreService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-Core',\n  template: `\n    <p>\n      core works!\n    </p>\n  `,\n  styles: []\n})\nexport class CoreComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CoreComponent } from './core.component';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [CoreComponent],\n  exports: [CoreComponent]\n})\nexport class MyCoreModule { }\n"],"names":[],"mappings":"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"}
