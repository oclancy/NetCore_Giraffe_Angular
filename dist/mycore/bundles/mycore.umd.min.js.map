{"version":3,"sources":["ng://mycore/lib/service-state.ts","ng://mycore/lib/signalr-client.service.ts","ng://mycore/lib/data.service.ts","ng://mycore/lib/auth.service.ts","ng://mycore/lib/auth.guard.ts","ng://mycore/lib/core.service.ts","ng://mycore/lib/core.component.ts","ng://mycore/lib/core.module.ts"],"names":["Unititialised","Intialised","SignalrClientService","this","Recieved","EventEmitter","message","Subject","state","Object","defineProperty","prototype","asObservable","send","connection","invoke","catch","err","console","error","toString","start","_this","signalR","HubConnectionBuilder","withUrl","build","on","data","log","emit","promise","then","next","ServiceState","Injectable","Output","DataService","http","StateChanged","GetData","post","pipe","map","res","json","catchError","handleError","operation","result","of","Http","AuthService","router","isLoggedIn","get","subscribe","login","username","password","that","JSON","stringify","Username","Password","response","ok","navigate","logout","Router","AuthGuard","authService","canActivate","url","checkLogin","IsLoggedIn","RedirectUrl","args","providedIn","CoreService","CoreComponent","ngOnInit","Component","selector","template","MyCoreModule","NgModule","imports","declarations","exports"],"mappings":"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","sourcesContent":["\r\n\r\nexport enum ServiceState {\r\n    Unititialised,\r\n    Intialised\r\n}\r\n","\r\nimport { Injectable, Output, EventEmitter } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { ServiceState } from './service-state';\r\n\r\ndeclare var signalR: any;\r\n\r\n@Injectable()\r\nexport class SignalrClientService {\r\n\r\n    promise: any;\r\n    connection: any;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    get State(): Observable<ServiceState>\r\n    {\r\n        return this.state.asObservable();\r\n    }\r\n\r\n    @Output() Recieved: EventEmitter<any> = new EventEmitter();\r\n\r\n    private message = new Subject<string>();\r\n    private state = new Subject<ServiceState>();\r\n\r\n    send(message: string): void {\r\n        this.connection.invoke('Broadcast', message)\r\n            .catch(err => console.error(err.toString()));\r\n\r\n        this.connection.invoke('Broadcast', 101)\r\n            .catch(err => console.error(err.toString()));\r\n    }\r\n\r\n    start():void {\r\n        //let connection = new signalR.HubConnection('/apphub');\r\n\r\n        //let url = 'http://' + document.location.host + '/chat';\r\n        //let connection = new signalR.HttpConnection(url, { transport: signalR.HttpTransportType.WebSockets, logger: signalR.LogLevel.Trace });\r\n\r\n        this.connection = new signalR.HubConnectionBuilder()\r\n            .withUrl(\"/apphub\")\r\n            .build();\r\n\r\n\r\n        this.connection.on('Send', data => {\r\n            console.log(data);\r\n            this.Recieved.emit(data);\r\n        });\r\n\r\n        this.promise = this.connection.start();\r\n\r\n        this.promise.catch(err => console.log(err));\r\n\r\n        this.promise.then(() => this.state.next(ServiceState.Intialised));\r\n        \r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs'\nimport { Http } from '@angular/http';\r\n\r\nimport { map, catchError } from 'rxjs/operators';\nimport { pipe, of } from 'rxjs';\nimport { EventEmitter } from '@angular/core';\r\nimport { Output } from '@angular/core';\r\n\nexport interface IDataService {\n    GetData(): Observable<any>;\n}\n\n@Injectable()\nexport class DataService implements IDataService{\n\r\n    @Output()\n    StateChanged: EventEmitter<boolean> = new EventEmitter();\r\n\r\n    GetData(): Observable<any> {\r\n\r\n        return this.http\r\n                    .post('/data', {})\r\n                    .pipe(\r\n            map(res => res.json()),\r\n            catchError(this.handleError('getData', []))\r\n        )\r\n    }\r\n\n    /**\r\n     * Handle Http operation that failed.\r\n     * Let the app continue.\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\r\n    private handleError<T>(operation = 'operation', result?: T) {\r\n        return (error: any): Observable<T> => {\r\n\r\n            // TODO: send the error to remote logging infrastructure\r\n            console.error(error); // log to console instead\r\n\r\n            // TODO: better job of transforming error for user consumption\r\n            console.log(`${operation} failed: ${error.message}`);\r\n\r\n            // Let the app keep running by returning an empty result.\r\n            return of(result as T);\r\n        };\r\n    }\n  constructor(private http:Http) { }\n}\n","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { Output } from '@angular/core';\r\nimport { map, catchError } from 'rxjs/operators';\nimport { pipe, of } from 'rxjs';\nimport { OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n        \n@Injectable()\nexport class AuthService {\n    RedirectUrl: string;\r\n\n    constructor(private http: Http, private  router: Router) {\n\n        this.http\n            .get(\"/auth\")\n            .pipe(\r\n                map(res =>res.json())\n            )\n            .subscribe(data => {\n                this.isLoggedIn = data;\n                this.StateChanged.emit(this.isLoggedIn);\n            });\n    }\n\n    private isLoggedIn: boolean = false;\n\n    @Output()\n    StateChanged: EventEmitter<boolean> = new EventEmitter()\n\n    get IsLoggedIn(): boolean { return this.isLoggedIn; }\r\n\r\n    public login(username:string, password:string) {\n\n        var that = this;\n        this.http\n            .post(\"/login\", JSON.stringify({ Username: username, Password: password }))\n            .subscribe(function (response) {\n               \n                that.isLoggedIn = response.ok;\n                that.StateChanged.emit(that.isLoggedIn);\r\n\r\n                if (response.ok) that.router.navigate([\"/\"])\r\n            },\n            function(error) {\n                that.isLoggedIn = false;\n                that.StateChanged.emit(that.isLoggedIn);\r\n            });\n\n    }\n\n\n    public logout() {\n\n        var that = this;\n        this.http\n            .get(\"/logout\")\n            .pipe(\n                map(res => { if (res.ok) this.router.navigate([\"/\"]) }),\n            );\n\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\r\nimport { Router } from '@angular/router';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n    constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | boolean {\n\r\n      let url: string = state.url;\r\n\r\n      return this.checkLogin(url);\n  }\n\n  checkLogin(url: string): boolean {\r\n      if (this.authService.IsLoggedIn) { return true; }\r\n\r\n      // Store the attempted URL for redirecting\r\n      this.authService.RedirectUrl = url;\r\n\r\n      // Navigate to the login page with extras\r\n      this.router.navigate(['/login']);\r\n\r\n      return false;\r\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CoreService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-Core',\n  template: `\n    <p>\n      core works!\n    </p>\n  `,\n  styles: []\n})\nexport class CoreComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CoreComponent } from './core.component';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [CoreComponent],\n  exports: [CoreComponent]\n})\nexport class MyCoreModule { }\n"]}