{"version":3,"file":"mycore.umd.js.map","sources":["ng://mycore/lib/service-state.ts","ng://mycore/lib/signalr-client.service.ts","ng://mycore/lib/data.service.ts","ng://mycore/lib/auth.service.ts","ng://mycore/lib/auth.guard.ts","ng://mycore/lib/core.service.ts","ng://mycore/lib/core.component.ts","ng://mycore/lib/core.module.ts"],"sourcesContent":["\r\n\r\nexport enum ServiceState {\r\n    Unititialised,\r\n    Intialised\r\n}\r\n","\r\nimport { Injectable, Output, EventEmitter } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { ServiceState } from './service-state';\r\n\r\ndeclare var signalR: any;\r\n\r\n@Injectable()\r\nexport class SignalrClientService {\r\n\r\n    promise: any;\r\n    connection: any;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    get State(): Observable<ServiceState>\r\n    {\r\n        return this.state.asObservable();\r\n    }\r\n\r\n    @Output() Recieved: EventEmitter<any> = new EventEmitter();\r\n\r\n    private message = new Subject<string>();\r\n    private state = new Subject<ServiceState>();\r\n\r\n    send(message: string): void {\r\n        this.connection.invoke('Broadcast', message)\r\n            .catch(err => console.error(err.toString()));\r\n\r\n        this.connection.invoke('Broadcast', 101)\r\n            .catch(err => console.error(err.toString()));\r\n    }\r\n\r\n    start():void {\r\n        //let connection = new signalR.HubConnection('/apphub');\r\n\r\n        //let url = 'http://' + document.location.host + '/chat';\r\n        //let connection = new signalR.HttpConnection(url, { transport: signalR.HttpTransportType.WebSockets, logger: signalR.LogLevel.Trace });\r\n\r\n        this.connection = new signalR.HubConnectionBuilder()\r\n            .withUrl(\"/apphub\")\r\n            .build();\r\n\r\n\r\n        this.connection.on('Send', data => {\r\n            console.log(data);\r\n            this.Recieved.emit(data);\r\n        });\r\n\r\n        this.promise = this.connection.start();\r\n\r\n        this.promise.catch(err => console.log(err));\r\n\r\n        this.promise.then(() => this.state.next(ServiceState.Intialised));\r\n        \r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs'\nimport { Http } from '@angular/http';\r\n\r\nimport { map, catchError } from 'rxjs/operators';\nimport { pipe, of } from 'rxjs';\nimport { EventEmitter } from '@angular/core';\r\nimport { Output } from '@angular/core';\r\n\nexport interface IDataService {\n    GetData(): Observable<any>;\n}\n\n@Injectable()\nexport class DataService implements IDataService{\n\r\n    @Output()\n    StateChanged: EventEmitter<boolean> = new EventEmitter();\r\n\r\n    GetData(): Observable<any> {\r\n\r\n        return this.http\r\n                    .post('/data', {})\r\n                    .pipe(\r\n            map(res => res.json()),\r\n            catchError(this.handleError('getData', []))\r\n        )\r\n    }\r\n\n    /**\r\n     * Handle Http operation that failed.\r\n     * Let the app continue.\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\r\n    private handleError<T>(operation = 'operation', result?: T) {\r\n        return (error: any): Observable<T> => {\r\n\r\n            // TODO: send the error to remote logging infrastructure\r\n            console.error(error); // log to console instead\r\n\r\n            // TODO: better job of transforming error for user consumption\r\n            console.log(`${operation} failed: ${error.message}`);\r\n\r\n            // Let the app keep running by returning an empty result.\r\n            return of(result as T);\r\n        };\r\n    }\n  constructor(private http:Http) { }\n}\n","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { Output } from '@angular/core';\r\nimport { map, catchError } from 'rxjs/operators';\nimport { pipe, of } from 'rxjs';\nimport { OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n        \n@Injectable()\nexport class AuthService {\n    RedirectUrl: string;\r\n\n    constructor(private http: Http, private  router: Router) {\n\n        this.http\n            .get(\"/auth\")\n            .pipe(\r\n                map(res =>res.json())\n            )\n            .subscribe(data => {\n                this.isLoggedIn = data;\n                this.StateChanged.emit(this.isLoggedIn);\n            });\n    }\n\n    private isLoggedIn: boolean = false;\n\n    @Output()\n    StateChanged: EventEmitter<boolean> = new EventEmitter()\n\n    get IsLoggedIn(): boolean { return this.isLoggedIn; }\r\n\r\n    public login(username:string, password:string) {\n\n        var that = this;\n        this.http\n            .post(\"/login\", JSON.stringify({ Username: username, Password: password }))\n            .subscribe(function (response) {\n               \n                that.isLoggedIn = response.ok;\n                that.StateChanged.emit(that.isLoggedIn);\r\n\r\n                if (response.ok) that.router.navigate([\"/\"])\r\n            },\n            function(error) {\n                that.isLoggedIn = false;\n                that.StateChanged.emit(that.isLoggedIn);\r\n            });\n\n    }\n\n\n    public logout() {\n\n        var that = this;\n        this.http\n            .get(\"/logout\")\n            .pipe(\n                map(res => { if (res.ok) this.router.navigate([\"/\"]) }),\n            );\n\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\r\nimport { Router } from '@angular/router';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n    constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | boolean {\n\r\n      let url: string = state.url;\r\n\r\n      return this.checkLogin(url);\n  }\n\n  checkLogin(url: string): boolean {\r\n      if (this.authService.IsLoggedIn) { return true; }\r\n\r\n      // Store the attempted URL for redirecting\r\n      this.authService.RedirectUrl = url;\r\n\r\n      // Navigate to the login page with extras\r\n      this.router.navigate(['/login']);\r\n\r\n      return false;\r\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CoreService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-Core',\n  template: `\n    <p>\n      core works!\n    </p>\n  `,\n  styles: []\n})\nexport class CoreComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CoreComponent } from './core.component';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [CoreComponent],\n  exports: [CoreComponent]\n})\nexport class MyCoreModule { }\n"],"names":["EventEmitter","Subject","Injectable","Output","http","map","catchError","of","Http","Router","Component","NgModule"],"mappings":"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"}
